module MemoriaInstrucoes(Endereco,Clock,Instrucao);
	input [31:0] Endereco;
	input Clock;
	output [31:0] Instrucao;
	
	reg[31:0] Memory[33:0];
	integer F = 0;
	
	
	always @(posedge Clock)
	begin
	
		// Codigo	
		if(F == 0)
		begin	
		
		// Programa 1 - Gen√©rico
		/*
		Memory[0] = 32'B00001000000000000000000000000001; // ADDI R[0] <- R[0] + 1
		Memory[1] = 32'B00000000000000000000000000000000; // ADD  R[0] <- R[0] + R[0]
		Memory[2] = 32'B00001100000000010000000000000000; // MOVE R[1] <- R[0]
		Memory[3] = 32'B00001000001000010000000000000010; // ADDI R[1] <- R[1] + 2
		Memory[4] = 32'B000111_00010_00001_0000000000000000; // STORE R[1],0(R[2])		
		Memory[5] = 32'B00000000001000010000100000000000; // ADD  R[1] <- R[1] + R[1]
		Memory[6] = 32'B00010000000000010000000000000000; // SLT  R[0] <- R[0] < R[1]
		Memory[7] = 32'B000110_00010_00011_00000_00000_000000; // LOAD  R[3],0(R[2])
		Memory[8] = 32'B00001100011000000000000000000000; // MOVE R[0] <- R[3]
		Memory[9] = 32'B00010100000000000000000000000000; // Jump 0
		*/
		// Programa 2 - Contador Decrescente
		/*
		Memory[0] = 32'B00001000000000110000000010010110; // ADDI R[3] <- R[0] + 150
		
		///Loop
		Memory[1] = 32'B001010_00011000000000000000000100; // BEQ R[3],R[0],End
		Memory[2] = 32'B000010_00011000111111111111111111; // ADDI R[3] <- R[3] + (-1)
		Memory[3] = 32'B000101_00000000000000000000000001; // Jump Loop
		
		///End
		Memory[4] = 32'B00010100000000000000000000000100; // Jump End
		*/
		/*
		// Programa 3 - Contador Crescente
		Memory[0] = 32'B001011_00000000110000000000000000; // ADDI R[3] <- R[0] + 0
		Memory[1] = 32'B000011_00011001000000000000000000; // MOVE R[4] <- R[3]
		Memory[2] = 32'B000010_00000001010000000000000010; // ADDI R[5] <- R[0] + 2
		
		///Loop
		Memory[3] = 32'B001011_00100000000000000000000111; // BNE R[4],R[0],End
		Memory[4] = 32'B000010_00011000110000000000000001; // ADDI R[3] <- R[3] + 1
		Memory[5] = 32'B000100_00101000110010000000000000; // SLT R[4] <- R[5] < R[3]   
		Memory[6] = 32'B000101_00000000000000000000000011; // Jump Loop
		
		///End:
		Memory[7] = 32'B000101_00000000000000000000000111; // Jump End
		*/
		/*
		// Programa 4 - Fibonacci
		Memory[0]  = 32'B001100_00000_00000_00000_00000_000000; // NOP
		Memory[1]  = 32'B000111_00000_00000_00000_00000_000000; // STORE R[0],0(R[0])
		Memory[2]  = 32'B000000_00000_00001_00000_00000_000100; // INC R[0]
		Memory[3]  = 32'B000000_00001_00001_00001_00000_000100; // INC R[1]
		Memory[4]  = 32'B000000_00010_00001_00010_00000_000100; // INC R[2]
		Memory[5]  = 32'B000000_00000_00000_00011_00000_000000; // ADD  R[3] <- R[0],R[0]
		Memory[6]  = 32'B000111_00001_00001_00000_00000_000000; // STORE R[1],0(R[1])
		Memory[7]  = 32'B000111_00011_00001_00000_00000_000000; // STORE R[1],0(R[3])
		Memory[8]  = 32'B001001_00001_00000_00000_00000_000000; // OUT R[1]
		Memory[9]  = 32'B001001_00010_00000_00000_00000_000000; // OUT R[2]
		Memory[10] = 32'B001000_00100_00100_00000_00000_000000; // IN R[4] <- Dispositivo(R[4])
		Memory[11] = 32'B001010_00100_00000_00000_00000_011001; // BEQ  R[4],R[0],FibonnaciDecresc
		Memory[12] = 32'B001010_00100_00011_00000_00000_011001; // BEQ  R[4],R[3],FibonnaciDecresc
		Memory[13] = 32'B001100_00000_00000_00000_00000_000000; // NOP
		// Start:
		Memory[14] = 32'B000000_00011_00001_00011_00000_000100; // INC  R[3],R[3]
		Memory[15] = 32'B000011_00000_00001_00000_00000_000000; // MOVE R[1] <- R[0]
		Memory[16] = 32'B000011_00010_00000_00000_00000_000000; // MOVE R[0] <- R[2]
		Memory[17] = 32'B000000_00000_00001_00010_00000_000000; // ADD  R[2] <- R[0],R[1]
		Memory[18] = 32'B000111_00011_00010_00000_00000_000000; // STORE R[2],0(R[3])
		Memory[19] = 32'B000000_00011_00100_00011_00000_000010; // MULT R[3] <- R[3],R[4]
		Memory[20] = 32'B000000_00011_00100_00011_00000_000011; // DIV  R[3] <- R[3],R[4]
		Memory[21] = 32'B000000_00011_00100_00011_00000_000001; // SUB  R[3] <- R[3],R[4]
		Memory[22] = 32'B000000_00011_00100_00011_00000_000000; // ADD  R[3] <- R[3],R[4]
		Memory[23] = 32'B001001_00010_00000_00000_00000_000000; // OUT  R[2]
		Memory[24] = 32'B001011_00100_00011_00000_00000_001110; // BNE  R[3] <- R[4],Start	
		//FibonnaciDecresc:
		Memory[25] = 32'B000110_00011_00101_00000_00000_000000; // LOAD R[5], 0(R[3])
		Memory[26] = 32'B001001_00101_00000_00000_00000_000000; // OUT  R[5]
		Memory[27] = 32'B000100_11111_00011_11111_00000_000000; // SLT R[31] <- R[31],R[5]
		Memory[28] = 32'B000000_00011_00001_00011_00000_000101; // DEC R[3] <- R[3] - 1
		Memory[29] = 32'B001010_11110_11111_00000_00000_011111; // BEQ R[30],R[31],End
		Memory[30] = 32'B000101_00000_00000_00000_00000_011001; // Jump FibonnaciDecresc
		//End
		Memory[31] = 32'B000110_00011_00101_00000_00000_000000; // LOAD R[5], 0(R[3])
		Memory[32] = 32'B001001_00101_00000_00000_00000_000000; // OUT  R[3]
		Memory[33] = 32'B000101_00000_00000_00000_00000_100001; // Halt 
		*/
		
		// Programa 5 - Trocando valores de registradores (Swap Bitwise)
		
		Memory[1]  = 32'B000010_00001_00001_00000_00000_001100; // ADDI R[1] <- R[1] + 12
		Memory[2]  = 32'B000010_00010_00010_00000_00000_011001; // ADDI R[2] <- R[2] + 25
		Memory[3]  = 32'B001001_00001_00000_00000_00000_000000; // OUT R[1]
		Memory[4]  = 32'B001001_00001_00000_00000_00000_000000; // OUT R[1]
		Memory[5]  = 32'B001001_00010_00000_00000_00000_000000; // OUT R[2]
		Memory[6]  = 32'B000001_00001_00010_00001_00000_000011; // XOR R[1] <- R[1],R[2]
		Memory[7]  = 32'B000001_00001_00010_00010_00000_000011; // XOR R[2] <- R[1],R[2]
		Memory[8]  = 32'B000001_00001_00000_00011_00000_000010; // NOT R[3] <- R[1]
		Memory[9]  = 32'B000001_00010_00000_00100_00000_000010; // NOT R[4] <- R[2]
		Memory[10] = 32'B000001_00011_00010_00011_00000_000000; // AND R[3] <- R[3],R[2]
		Memory[11] = 32'B000001_00001_00100_00100_00000_000000; // AND R[4] <- R[4],R[1]
		Memory[12] = 32'B000001_00011_00100_00001_00000_000001; // OR <- R[1] <- R[3],R[4]
		Memory[13] = 32'B001001_00000_00000_00000_00000_000000; // OUT R[0]
		Memory[14] = 32'B001001_00001_00000_00000_00000_000000; // OUT R[1]
		Memory[15] = 32'B001100_00000_00000_00000_00000_000000; // NOP
		Memory[16] = 32'B001001_00010_00000_00000_00000_000000; // OUT R[2]
		Memory[17] = 32'B000101_00000_00000_00000_00000_001110; // Jump 14
	
		
		F = 1;
		end
		///////////////////////////////////
	end
	
	assign Instrucao = Memory[Endereco];
	
endmodule
